Spring DataJpa 는 쿼리메서드 기능을 제공

// 쿼리메서드의 기능 3가지
1. 메서드 이름으로 쿼리 생성
2. 메서드 이름으로 JPA NamedQuery 호출
3. `@Query` 어노테이션을 사용해서 리퍼지토리 인터페이스에 직접 정의

// 메서드 이름으로 쿼리 생성
- 스프링 DataJPA 는 메서드 이름을 분석해서 JPQL 을 생성하고 실행
- 쿼리메서드 필터 조건(Naming 규칙) - https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
   조회: find...By, read...By, query...By, get...By --> By 가 꼭있어야함. By 뒤 조건문이 들어감. 아무것도없으면 전체조회.
   COUNT: count...By --> 반환타입 long
   EXISTS: exists...By --> 반환탕비 boolean
   삭제: delete...By, remove...By 반환타입 long
   DISTINCT: findDistinct, findMemberDistinctBy
   LIMIT: findFirst3, findTop, findTop3
   https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.limit-query-result
> 참고: 이 기능은 엔티티의 필드명이 변경되면 인터페이스에 정의한 메서드 이름도 꼭 함께 변경해야 한다. 그렇지 않으면 애플리케이션을 시작하는 시점에 오류가 발생함.
> 이렇게 애플리케이션 로딩 시점에 오류를 인지할 수 있는 것이 스프링 데이터 JPA 의 매우 큰 장점이다

// 메서드 이름으로 JPA NamedQuery 호출 (별로쓸일이 없음.)
- JPA 에서는 em.createNamedQuery() 로 엔티티에 지정한 NamedQuery 를 지정
- DataJPA 에는 레포지토리에 @Query(name="") 으로 엔티티에 지정한 NamedQuery 를 호출할 수 있음. (파라미터바인딩은 @Param(name = "") 사용)
- 별로 쓰지 않지만, NamedQuery 가 가지는 큰 장점이있는데, 엔티티에 작성한 NamedQuery 는 애플리케이션 로딩시점에 파싱해봐서 오류가있으면 오류를 띄워준다는 것임.
