// Web 확장 - 페이징과 정렬
- 스프링 데이터가 제공하는 페이징과 정렬 기능을 스프링 MVC 에서 편리하게 사용할 수 있음.
- 파라미터로 Pageable 을 받을 수 있음. Pageable 은 인터페이스, 실제는 `org.springframework.data.domain.PageRequest` 객체 생성
예) /members?page=0&size=3&sort=id,desc&sort=username,desc
    page: 현재 페이지, 0부터 시작한다.
    size: 한 페이지에 노출할 데이터 건수
    sort: 정렬 조건을 정의한다. 예) 정렬 속성,정렬 속성...(ASC | DESC), 정렬 방향을 변경하고 싶으면 sort 파라미터 추가 ( asc 생략 가능 )
* size 의 디폴트는 20 이다.
EX) --> 컨트롤러에서 파라미터가 바인딩될때, Pageable 이 있으면 PageRequest 라는 객체를 생성해서 값을 채워서 인젝션시켜줌.
@GetMapping(value = "/members")
public Page<Member> list(Pageable pageable) {
    Page<Member> page = memberRepository.findAll(pageable);
    return page;
}

// 디폴트 값 변경은 두가지 방법 지원 (글로벌, 개별)
    --> 글로벌 설정 방법
    spring.data.web.pageable.default-page-size=10
    spring.data.web.pageable.max-page-size=20
    --> 개별 설정 방법 (이놈이 우선권)
    컨트롤러의 매개변수에 @PageableDefault 어노테이션을 사용
    @GetMapping(value = "/members2")
    public Page<Member> list2(@PageableDefault(size = 4, sort = "username") Pageable pageable) {
        Page<Member> page = memberRepository.findAll(pageable);
        return page;
    }

// 접두사
- 페이징 정보가 둘 이상이면 접두사로 구분
- @Qualifier 에 접두사명 추가 "{접두사명}_xxx”
- 예제: /members?member_page=0&order_page=1
    public String list(
    @Qualifier("member") Pageable memberPageable,
    @Qualifier("order") Pageable orderPageable, ...

// Page 내용을 DTO 로 변환
- 엔티티를 API 로 노출하면 다양한 문제가 발생 (내부설계를 노출시키는 미친행위 ㅇㅇ). 또한, 엔티티가 바뀌면 API 스펙 자제가 바뀌어버림.
--> 그래서 엔티티를 꼭 DTO 로 변환해야함.
* 결론 : Page 는 map() 을 지원해서 내부 데이터를 다른 것으로 변경할 수 있음 --> map() 으로 DTO 로 변환시키면 됨.

// Page 를 1부터 시작
- 스프링 데이터는 Page 를 0부터 시작함
- Page 를 1부터 시작하기위해서는 두가지방법이 존재한다.
--> 첫번째 방법 :
    - Pageable, Page 를 파라미터와 응답값으로 사용하지 않고, 직접 클래스를 만들어서 처리. 그리고 직접 PageRequest(Pageable 구현체) 를 생성해서 리포지토리에 넘긴다. (물론 응답값도 Page 대신에 직접 만들어서 제공해야 한다.)
--> 두번째 방법 :
    - spring.data.web.pageable.one-indexed-parameters 를 true 로 설정한다. 그런데 이 방법은 web 에서 page 파라미터를 -1 처리 할 뿐이다.
    따라서 응답값인 Page 에 모두 0 페이지 인덱스를 사용하는 한계가 있다
