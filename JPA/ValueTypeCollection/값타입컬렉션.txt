// 엔티티 타입의 특징
- 식별자 O
- 생명 주기 관
- 공유할 수 있다.

// 값타입의 특징
- 식별자가 없다.(PK 가 없다.)
- 생명주기를 엔티티에 의존한다.
- 공유하지 않는 것이 안전(복사해서 사용)
- 불변객체로 만드는 것이 안전하다.

// 값 타입 컬렉션
- 값 타입을 하나 이상 저장할때 사용함.
- @ElementCollection, @CollectionTable 사용 (마치 @OneToMany(name = "", cascade=All, OrphanRemoval=true) 와 같은 형태.)
- 데이터베이스는 컬렉션을 같은 테이블에 저장할 수 없기 때문에, 컬렉션을 저장하기 위한 별도의 테이블이 필요함.

// 값 타입 컬렉션 사용
- 값 타입 저장 예제
- 값 타입 조회 예제
- 값 타입 컬렉션도 지연 로딩 전략 사용
- 값 타입 수정 예제
- 참고 : 값 타입 컬렉션은 영속성 전에(Cascade) + 고아객체 제거 기능을 필수로 가진다고 볼 수 있음.

// 값 타입 컬렉션의 제약사항
- 값 타입은 엔티티와 다르게 식별자 개념이 없다.
- 값은 변경하면 추적이 어렵다.
- 값 타입 컬렉션에 변경사항이 발생하면, 주인 엔티티와 연관된 모든 데이터를 삭제하고, 값 타입 컬렉션에 있는 현재 값을 모두 다시 저장함 (진짜 겁나중요)
- 값 타입 컬렉션을 매핑하는 테이블은 모든 컬럼을 묶어서 기본 키를 구성해야함. null 입력 X, 중복 저장 X
* 결론.. 값타입 컬렉션은 다르게 @ElementCollection, @CollectionTable 말고 다르게 풀어가야한다.

// 값 타입 컬렉션의 대안
- 실무에서는 상황에 따라 값 타입 컬렉션 대신에 일대다(1:N) 관계를 고려해야함.
- 일대다 관계를 위한 엔티티를 만들고, 여기에서 값 타입을 사용
- 영속성 전이(Cascade) + 고아객체 제거를 사용해서 값 타입 컬렉션처럼 사용해야함.
- Ex) AddressEntity 참고하셈

// 결론
- 진짜 단순한 경우를 제외하고는 값타입컬렉션대신 일대다(1:N) 관계를 고려해야함.
  Address 값타입을 AddressEntity 라는 엔티티로 승격시켜서 사용해야야함.
- 엔티티와 값타입을 혼동해서 엔티티를 값타입으로 만들면 안됨.
- 식별자가 필요하고, 지속해서 값을 추적, 변경해야한다면, 그것은 값 타입이 아닌 엔티티라고볼수 있음.