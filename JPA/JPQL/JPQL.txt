// JPQL
- JPQL 은 객체지향 쿼리 언어임. 따라서 테이블을 대상으로 쿼리하는것이 아니라 엔티티 객체를 대상으로 쿼리한다.
- JPQL 은 SQL 을 추상화해서 특정 데이터베이스 SQL 에 의존하지 않음 (중요)
- JPQL 은 결국 SQL 로 변환됨. (더 중요)

// JPQL 문법
- select m from Member as m where m.age > 18
- 엔티티와 속성은 대소문자 구분 O (Member, age)
- JPQL 키워드는 대소문자 구분 X (SELECT, FROM, where)
- 엔티티 이름 사용, 테이블이름이 아님 (중요)
- 별칭은 필수(m) (as 는 생략 가능)

// 집합과 정렬
- select
    count(m),   // 회원수
    sum(m.age), // 나이 합
    avg(m.age), // 평균 나이
    max(m.age), // 최대 나이
    min(m.age)  // 최소 나이
  from Member m
- GROUP BY, HAVING
- ORDER BY

// TypeQuery, Query
- TypeQuery : 반환 타입이 명확할 때 사용
- Query : 반환 타입이 명확하지 않을 때 사용

// 결과 조회 API
- query.getResultList() : 결과가 하나 이상일때, 리스트 반환
    (결과가 없으면 빈 리스트 반환)
- query.getSingleResult() : 결과가 정확히 하나있어야 함. (단일 객체 반환)
    (결과가 없으면 NoResultException)
    (결과가 둘 이상이면 NonUniqueResultException)

// 파라미터 바인딩
- 파라미터 바인딩 (이름 기준 - 위치 기준)
- 이름기준 (보통 체이닝으로 연결해서 사용.)
    SELECT m FROM Member m where m.username=:username
    query.setParameter("username", usernameParam);
- 위치기준 (사용하지않는 것이 좋음 (중간에 파라미터가 한개 추가되면 순서가 다 밀리기때문임.))
    SELECT m FROM Member m where m.username=?1
    query.setParameter(1, usernameParam)

// 프로젝션
- SELECT 절에 조회할 대상을 지정하는 것
- 프로젝션 대상 : 엔티티, 임베디드타입, 스칼라 타입 (숫자, 문자 등 기본 데이터 타입)
- SELECT m FROM Member m --> 엔티티 프로젝션
- SELECT m.team FROM Member m --> 엔티티 프로젝션
- SELECT m.address FROM Member m --> 임베디드 타입 프로젝션
- SELECT m.username, m.age FROM Member m -> 스칼라 타입 프로젝션
- DISTINCT 로 중복 제거

// 페이징 API
- JPA 는 페이징을 다음 두 API 로 추상화
1. setFirstResult(int startPosition) : 조회 시작 위치  (0부터 시작)
2. setMaxResults(int maxResult) : 조회할 데이터 수
MYSQL : LIMIT ?, ?
ORACLE : ROW NUM 3Depth

// join
1. 내부 조인:
 SELECT m FROM Member m [INNER] JOIN m.team t
2. 외부 조인:
 SELECT m FROM Member m LEFT [OUTER] JOIN m.team t
3. 세타 조인:
 SELECT count(m) from Member m, Team t where m.username=t.name
4. ON 절 조인 (JPA 2.1 부터 지원)
    - ON 절을 활용한 조인 (조인 대상 필터링 가능) --> 예) Member 과 Team 을 조인하면서, Team 이름이 A 인 팀만 조인
        JPQL : SELECT m, t FROM Member m LEFT JOIN m.team t on t.name = 'A'
        SQL : SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.TEAM_ID=t.id and t.name='A'
    - 조인 대상 필터링
    - 연관관계가 없는 엔티티 외부 조인 가능 (Hibernate 5.1 부터) --> 예) Member 의 이름과 Team 의 이름이 같은 대상 외부 조인
        JPQL : SELECT m, t FROM Member m LEFT JOIN Team t on m.username = t.name
        SQL : SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.username = t.name

// Sub Query 서브쿼리
예제)
- 나이가 평균보다 많은 회원
    select m from Member m where m.age > (select avg(m2.age) from Member m2)
- 한건이라도 주문한 고객
    select m from Member m where (select count(o) from Order o where m = o.member) > 0

// Sub Query 지원 함수
- [NOT] EXISTS (subquery) : 서브쿼리의 결과가 존재하면 참
    - {ALL | ANY | SOME} (subquery)
    - ALL : 모두 만족하면 참
    - ANY, SOME : 같은 의미, 조건을 하나라도 만족하면 참
- [NOT] IN (subquery) : 서브쿼리의 결과중 하나라도 같은 것이 있다면 참.
예제)
- 팀 A 소속인 회원
    select m from Member m where exists (select t from m.team t where t.name = '팀A')
- 전체 상품 각각의 재고보다 주문량이 많은 주문들
    select o from Order o where o.orderAmount > ALL (select p.stockAmount from Product p)
- 어떤 팀이든 팀에 소속된 회원
    select m from Member m where m.team = ANY (select t from Team t)

// JPA 서브 쿼리 한계
- JPA 는 WHERE, HAVING 절에서만 서브 쿼리 사용 가능
- SELECT 절도 가능 (하이버네이트에서 지원)
- FROM 절의 서브 쿼리는 현재 JPQL 에서 불가능. --> 조인으로 풀 수 있으면 풀어서 해결

// JPQL 타입 표현
- 문자 : 'Hello', 'She''s'
- 숫자 : 10L(Long), 10D(Double), 10F(Float)
- Boolean : TRUE, FALSE
- ENUM : jpabook.MemberType.Admin(패키지명 포함)
- 엔티티 타입 : TYPE(m) = Member (상속 관계에서 사용)