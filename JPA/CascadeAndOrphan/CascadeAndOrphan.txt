// 영속성 전이 : CASCADE
영속성 전이는 여태 배운, 즉시로딩, 지연로딩, 연관관계 셋팅과 전혀 관련없는 얘기임.
- 특정 엔티티를 영속상태로 만들 때 연관된 엔티티도 함께 영속상태로 만들고 싶을 떄 사용
* EX) Parent(1) : Child(N) 관계에서 부모엔티티를 저장할 때 자식엔티티도 함께 저장.
* 하나의 부모가 자식들을 관리할때유용 (게시판). Parent 만 Child 를 관리떄 유용(단일소유자). 하지만, 여기서 Child 가 다른엔티티와 연관되어있으면 쓰면안됨.

// 영속성 전이 주의
- 영속성 전이는 연관관계를 매핑하는 것과 아무관련이 없음.
- 엔티티를 영속화활때 연관된 엔티티도 함께 영속화하는 편리함을 제공할 뿐임.

// Cascade 의 종류
- ALL : 모두 적용 (쓸모 O)
- PERSIST : 영속화할때만 적용 (쓸모 O)
- REMOVE : 삭제할때만 적용
- MERGE : 병합할대만 적용
- REFRESH : REFRESH
- DETACH : DETACH

// 고아객체
- 고아객체 제거 : 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능. (orphanRemoval = true)
- 꼭 특정 엔티티가 개인 소유할때 사용해야함 (parent 가 child 를 관리하는데, child 가 다른 객체와 연관되어있으면 안된다는 뜻임.)
- @OneToOne, @OneToMany 만 사용 가능. (연쇄적인 기능이니까 당연히 1:N 이 맞겠지?)
- 참고 : 개념적으로 부모를 제거하면 자식은 고아가 됨. 따라서 고아 객체 제거 기능을 활성화하면, 부모를 제거할떄 자식도 함께 제거됨. 이것은 CascadeType.REMOVE 처럼 동작함.

***** 비교 *****
orphanRemoval = true : 부모가 지워질때, 자식도 같이지워짐.
cascade = CascadeType.ALL : 부모가 지워질떄, 자식도 같이 지워짐.
orphanRemoval = true, cascade = CascadeType.ALL 둘다 사용시 : 부모를 지우면 자식도 지워지고, 자식을 지우면 자식만 지워짐.
***************


// 영속성전이(Cascade) 와 고아객체를 같이사용했을 시
- 일반적으로 스스로 생명주기를 관리하는 엔티티는 em.persist() 로 영속화, em.remove() 로 제거함.
- CascadeType.ALL  +  orphanRemoval = true 를 둘다사용하면 부모(Parent) 엔티티를 통해서 자식의 생명주기를 관리할 수 있음.
- Domain 주도설계(DDD)의 Aggregate Root 개념을 구현할때 유용함.
