// 권장하는 @Id 식별자 전략
- 기본키 제약 조건: null 아님, 유일, 변하면 안된다.
- 미래까지 이 조건을 만족하는 자연키는 찾기 어렵다. 대리키(대체키)를 사용하자.
- 예를 들어 주민등록번호도 기본 키로 적절하지 않다.
- 권장 : Long 형 + 대체키 + 키 생성전략 사용 (Random 값, UUID 추천)

// IDENTITY 전략 - 특징
- 기본 키 생성을 데이터베이스에 위임
- 주로  MySQL, PostgreSQL, SQL Server, DB2 에서 사용
- JPA 는 보통 트랜잭션 커밋시점에 INSERT SQL 을 실행
- AUTO_INCREMENT 는 데이터베이스에 INSERT SQL 을 실항 한 이우에 ID 값을 알 수 있음.
- IDENTITY 전략은 em.persist() 시점에 즉시, INSERT SQL 을 DB 에 날려 실행하고 DB 에서 식별자를 조회함.
* allocationSize 는 성능이슈와 관련함 --> 매  insert 마다 call by next value 가 호출되기 때문에 성능이슈임
  --> 따라서 처음 갖고올때 PKI 를 50 개를 먼저 확보하고, 메모리에 저장시킨후 insert 때마다 메모리에서 꺼내 사용하는 것임 --> 후에 51 번째 PKI 를 만나면 다시 50개씩 들고오는것임.

// SEQUENCE 전략 - 특징
- 데이터베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트 (예: 오라클 시퀀스)
- 오라클, PostgreSQL, DB2, H2 데이터베이스에서 사용
* allocationSize 는 성능이슈와 관련함 --> 매  insert 마다 call by next value 가 호출되기 때문에 성능이슈임
  --> 따라서 처음 갖고올때 PKI 를 50 개를 먼저 확보하고, 메모리에 저장시킨후 insert 때마다 메모리에서 꺼내 사용하는 것임 --> 후에 51 번째 PKI 를 만나면 다시 50개씩 들고오는것임.
