// 임베디드 타입 사용법
- @Embeddable : 값 타입을 정의하는곳에 표시
- @Embedded : 값 타입을 사용하는 곳에 표시
- 기본 생성자 필수

// 임베디드 타입의 장점
- 재사용
- 높은 응집도
- Period.isWork() 처럼 해당 값 타입만 사용하는 의미 있는 메소드를 만들 수 있음
- 임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명주기를 의존함

// 임베디드 타입과 테이블 매핑
- 임베디드 타입은 엔티티의 값일 뿐이다.
- 임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.
- 객체와 테이블으 아주 세밀하게(find-grained) 매핑하는 것이 가능
- 잘 설계한 ORM 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 더 많음.

// @AttributeOverride : 속성 재정의
- 한 엔티티에서 같은 값 타입을 사용할때 사용함.
- 당연히 컬렴명이중복되기 떄문에 @AttributeOverrides, @AttributeOverride 를 사용해서 컬럼명 속성을 재정의해야 함.

// 임베디드 타입과 null
- 임베디드 타입의 값이 null 이면 매핑한 컬럼 값은 모두  null 임