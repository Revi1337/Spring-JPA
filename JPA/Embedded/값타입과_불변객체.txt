// 값 타입
- 값타입은 복잡한 객체 사상을 조금이라도 단순화하려고 만든 개념. 따라서, 값 타입은 단순하고 안전하게 다룰 수 있어야 함.

// 값 타입 공유 참조
- 임베디드 타입 같은 값 타입을 여러 엔티티에서 공유하면 위험함.
- 부작용 발생 (Side Effect) 발생

// 값 타입 복사
- 값 타입의 실제 인스턴스인 값을 공유하는 것은 위험함
- 대신 값(인스턴스)를 복사해서 사용해야함.

// 객체 타입의 한계
- 항상 값을 복사해서 사용하면 공유 참조로 인해 발생하는 부작용을 피할 수 없다.
- 문제는 임베디드 타입처럼 직접 정의한 값 타입은 자바의 기본 타입이 아니라 객체 타입이다.
- 자바 기본타입에 값을 대입하면 값을 복하한다.
- 객체 타입은 참조 값을 직접 대입하는 것을 막을 방법이 없다.
- 객체의 공유 참조는 피할 수 없다.

// 불변 객체
- 객체 타입을 수정할 수 없게 만들면 부작용을 원천 차단
- 값 타입은 불변 객체 (ImmutableObject) 로 설계해야함.
- 불변 객체 : 생성 시점 이후, 절대 값을 변경할 수 없는 객체를 말함.
- 생성자로만 값을 설정하고 수정자(Setter) 를 만들지 않으면 됨. (중요)
- 참고 :  Integer, String 은 자바가 제공하는 대표적인 불변 객체