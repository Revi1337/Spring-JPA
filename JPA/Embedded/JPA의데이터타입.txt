// JPA 의 데이터 타입 분류
1. 엔티티 타입 (최상위 엔티티)
- @Entity 로 정의하는 객체
- 데이터가 변해도 식별자로 지속해서 추적 가능
- Ex) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능

2. 값 타입 (엔티티에 들어가는 값)
- int, Integer, String 처럼 단순히 값으로 사용하는 자바 기본 타입인 객체
- 식별자가 없고 값만 있으므로 변경시 추적 불가
- Ex) 숫자 100 을 200으로 변경하면 완전히 다른 값으로 대체

// 값타입의 종류
1. 기본값 타입
    - 자바 기본 타입 (int, double)
    - 래퍼 클래스 (Integer, Long)
    - String
2. 임베디드 타입(embedded type, 복합 값 타입)
3. 컬렉션 값 타입 (collection value type)

// 기본값 타입
- Ex) : String name, int age
- 생명주기를 엔티티에 의존함 (ex. 회원을 삭제하면 이름, 나이 필드도 함께 삭제)
- 값 타입은 공유하면 절대안됨 (ex. 회원 이름 변경 시 다른 회원의 이름도 함께 변경되면 안됨)
    * 자바의 기본 타입은 절대 공유할 수 없음. 예로 int, double 같은 기본 타입(primitive type) 은 값을 절대 공유하지않음. (기본 타입은 항상 값을 복사하는 것임.)
    * Integer 같은 래퍼 클래스나 String 같은 특수한 클래스는 공유 가능한 객체이지만 변경할 수 없음.

// 값 타입의 비교
- 동일성(identity ) 비교 : 인스턴스의 참조 값을 비교. == 사용
- 동등성(equivalence) 비교 : 인스턴스의 값을 비교, equals() 사용
- 값 타입은 a.equals(b) 를 사용해서 동등성 비교를 해야함.
- 값 타입의 equals() 메서드를 적절하게 재정의(주로 모든 필드 사용)
